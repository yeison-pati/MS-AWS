name: Deploy Microservices

on:
  push:
    branches: [ "master" ]

jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      tf_outputs: ${{ steps.tf-outputs.outputs.tf_outputs }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        id: init
        run: terraform -chdir=terraform init

      - name: Terraform Plan
        id: plan
        env:
            TF_LOG: DEBUG
        run: terraform -chdir=terraform plan -no-color

      - name: Terraform Apply
        id: apply
        env:
          TF_LOG: DEBUG
        run: terraform -chdir=terraform apply -auto-approve

      - name: Get Terraform Outputs
        id: tf-outputs
        run: |
          echo "ECR_REPO_CONFIG_SERVER=$(terraform -chdir=terraform output -raw ecr_repository_urls | jq -r '.["config-server"]')" >> $GITHUB_ENV
          echo "ECR_REPO_DISCOVERY_SERVICE=$(terraform -chdir=terraform output -raw ecr_repository_urls | jq -r '.["discovery-service"]')" >> $GITHUB_ENV
          echo "ECR_REPO_GATEWAY=$(terraform -chdir=terraform output -raw ecr_repository_urls | jq -r '.["gateway"]')" >> $GITHUB_ENV
          echo "ECR_REPO_ORDER_SERVICE=$(terraform -chdir=terraform output -raw ecr_repository_urls | jq -r '.["order-service"]')" >> $GITHUB_ENV
          echo "ECR_REPO_USER_SERVICE=$(terraform -chdir=terraform output -raw ecr_repository_urls | jq -r '.["user-service"]')" >> $GITHUB_ENV
          
          echo "EKS_CLUSTER_NAME=$(terraform -chdir=terraform output -raw eks_cluster_name)" >> $GITHUB_ENV
          echo "EKS_CLUSTER_ENDPOINT=$(terraform -chdir=terraform output -raw eks_cluster_endpoint)" >> $GITHUB_ENV

          echo "mysql_rds_endpoint=$(terraform -chdir=terraform output -raw mysql_rds_endpoint)" >> $GITHUB_ENV
          echo "mysql_rds_port=$(terraform -chdir=terraform output -raw mysql_rds_port)" >> $GITHUB_ENV
          echo "mysql_rds_db_name=$(terraform -chdir=terraform output -raw mysql_rds_db_name)" >> $GITHUB_ENV
          echo "mysql_rds_username=$(terraform -chdir=terraform output -raw mysql_rds_username)" >> $GITHUB_ENV
          echo "mysql_rds_password=$(terraform -chdir=terraform output -raw mysql_rds_password)" >> $GITHUB_ENV

          echo "postgres_rds_endpoint=$(terraform -chdir=terraform output -raw postgres_rds_endpoint)" >> $GITHUB_ENV
          echo "postgres_rds_port=$(terraform -chdir=terraform output -raw postgres_rds_port)" >> $GITHUB_ENV
          echo "postgres_rds_db_name=$(terraform -chdir=terraform output -raw postgres_rds_db_name)" >> $GITHUB_ENV
          echo "postgres_rds_username=$(terraform -chdir=terraform output -raw postgres_rds_username)" >> $GITHUB_ENV
          echo "postgres_rds_password=$(terraform -chdir=terraform output -raw postgres_rds_password)" >> $GITHUB_ENV

  build-and-push-images:
    needs: terraform
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ "config-server", "discovery-service", "gateway", "order-service", "user-service" ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          IMAGE_TAG: ${{ github.sha }}
          GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
          GIT_PASSWORD: ${{ secrets.GIT_PASSWORD }}
        run: |
          case ${{ matrix.service }} in
            config-server)    REPO_URL=$ECR_REPO_CONFIG_SERVER ;;
            discovery-service) REPO_URL=$ECR_REPO_DISCOVERY_SERVICE ;;
            gateway)          REPO_URL=$ECR_REPO_GATEWAY ;;
            order-service)    REPO_URL=$ECR_REPO_ORDER_SERVICE ;;
            user-service)     REPO_URL=$ECR_REPO_USER_SERVICE ;;
          esac

          echo "Building and pushing image for ${{ matrix.service }} -> $REPO_URL:$IMAGE_TAG"

          docker build \
            --build-arg GIT_USERNAME=$GIT_USERNAME \
            --build-arg GIT_PASSWORD=$GIT_PASSWORD \
            -t $REPO_URL:$IMAGE_TAG ./${{ matrix.service }}

          docker push $REPO_URL:$IMAGE_TAG


  deploy-to-eks:
    needs: [terraform, build-and-push-images]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Kubeconfig
        run: |
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region ${{ secrets.AWS_REGION }}

      - name: Deploy to EKS
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          for service in config-server discovery-service gateway order-service user-service; do
            case $service in
              config-server)    REPO_URL=$ECR_REPO_CONFIG_SERVER ;;
              discovery-service) REPO_URL=$ECR_REPO_DISCOVERY_SERVICE ;;
              gateway)          REPO_URL=$ECR_REPO_GATEWAY ;;
              order-service)    REPO_URL=$ECR_REPO_ORDER_SERVICE ;;
              user-service)     REPO_URL=$ECR_REPO_USER_SERVICE ;;
            esac

            IMAGE_URL_WITH_TAG="$REPO_URL:$IMAGE_TAG"
            echo "Deploying $service with image $IMAGE_URL_WITH_TAG"

            sed -i "s|__IMAGE_URL__|$IMAGE_URL_WITH_TAG|g" kubernetes/$service/deployment.yml
            kubectl apply -f kubernetes/$service/
          done
  
  cleanup:
    needs: [terraform, build-and-push-images, deploy-to-eks]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Terraform init
        run: terraform -chdir=terraform init
      - name: Destroy infra
        run: terraform -chdir=terraform destroy -auto-approve
